import "Srl/srl";
import "libpthread.so.0";

module Threading {
    class _Thread {
    }
    def Thread: alias ptr[_Thread];

    class SchedParam {
       def schedPriority: Int;
    };

    class TimeSpec {
        def tvSec: ArchInt;
        def tvNsec: Int[64];
    };
    
    class ThreadAttributes {
        def flags: Int;
        def stackSize: Int;
        def contentionScope: Int;
        def inheritSched: Int;
        def detachState: Int;
        def sched: Int;
        def param: SchedParam;
        def startTime: TimeSpec;
        def deadLine: TimeSpec;
        def period: TimeSpec;
    }

    class Mutex {
        def data: array[Word[8], 40];
    }

    class MutexAttributes {
        def pshared: Int;
        def kind: Int;
        def protocol: Int;
        def robustness: Int;
    }

    class Cond {
        def data: array[Word[8], 48];
    }

    @expname [pthread_create]
    func createThread (
        pthread: ptr[Thread], attr: ptr[ThreadAttributes], start_routine: ptr[func (ptr):ptr], arg: ptr
    ): Int;

    @expname [pthread_join]
    func joinThread (pthread: Thread, retval:ptr[ptr]): Int;
    
    @expname [pthread_cond_signal]
    func signalCond(cond: ptr[Cond]);

    @expname [pthread_cond_wait]
    func waitCond(cond: ptr[Cond], mutex: ptr[Mutex]): Int;
    
    @expname [pthread_mutex_init]
    func initMutex(mutex: ptr[Mutex], attrs: ptr[MutexAttributes]);

    @expname [pthread_mutex_lock]
    func lockMutex(mutex: ptr[Mutex]): Int;
   
    @expname [pthread_mutex_unlock]
    func unlockMutex(mutex: ptr[Mutex]);
}

